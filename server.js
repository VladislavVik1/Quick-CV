import express from 'express';
import cors from 'cors';
import mongoose from 'mongoose';
import path from 'path';
import { fileURLToPath } from 'url';
import OpenAI from 'openai'; 

import CV from './models/Cv.js';
import Setting from './models/Setting.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const publicPath = path.join(__dirname, 'public');

const app = express();
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.static(publicPath));

let openai; // –æ–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ

const startServer = async () => {
  try {
    await mongoose.connect('mongodb+srv://CvAdmin:Quickcvadmin@cluster0.t7x7ove.mongodb.net/quickcv');
    console.log('‚úÖ MongoDB connected');

    const keyRecord = await Setting.findOne({ key: 'OPENAI_API_KEY' });
    if (!keyRecord) throw new Error('‚ùå OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ MongoDB');
    const openaiKey = keyRecord.value;
    console.log('üîë OPENAI_API_KEY —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ MongoDB');

    openai = new OpenAI({ apiKey: openaiKey });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CV
    app.post('/api/cv', async (req, res) => {
      try {
        const cv = new CV(req.body);
        await cv.save();
        res.status(201).json({ message: 'CV —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!' });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CV:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ.' });
      }
    });

    app.post('/generate-description', async (req, res) => {
      try {
        const {
          name = '',
          skills = [],
          specialty = '',
          hobbies = '',
          language = 'ru'
        } = req.body;

        const skillStr = skills.length ? skills.join(', ') : '–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤';
        const hobbyStr = hobbies || '–±–µ–∑ —É–≤–ª–µ—á–µ–Ω–∏–π';

        const langNames = {
          ru: 'Russian',
          uk: 'Ukrainian',
          en: 'English'
        };
        const langName = langNames[language] || 'Russian';

        const prompt = `
–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ä–µ–∑—é–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–û —Å–µ–±–µ¬ª –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ –Ω–∞ —è–∑—ã–∫–µ ${langName}.

–ù–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –Ω–∞–≤—ã–∫–∏ –¥–æ—Å–ª–æ–≤–Ω–æ. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å–º—ã—Å–ª. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ö–æ–±–±–∏ ‚Äî –≤–ø–ª–µ—Ç–∏ –∏—Ö –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤ —Ä–∞—Å—Å–∫–∞–∑. –°–¥–µ–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–∏–º (–æ—Ç 300 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤).

Name: ${name}
Profession: ${specialty}
Skills: ${skillStr}
Hobbies: ${hobbyStr}
`;

        const completion = await openai.chat.completions.create({
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
        });

        const result = completion.choices[0]?.message?.content;
        if (!result) throw new Error('GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');

        res.json({ description: result.trim() });
      } catch (error) {
        console.error('‚ùå OpenAI error:', error?.response?.data || error.message || error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.' });
      }
    });

    const PORT = 10000;
    app.listen(PORT, () => {
      console.log(`üöÄ Server running at http://localhost:${PORT}`);
    });

  } catch (err) {
    console.error('‚ùå –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω:', err.message);
    process.exit(1);
  }
};

startServer();
